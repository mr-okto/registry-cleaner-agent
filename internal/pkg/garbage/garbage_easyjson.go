// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package garbage

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5d95a6ebDecodeRegistryCleanerAgentInternalPkgGarbage(in *jlexer.Lexer, out *GarbageBlob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int64(in.Int64())
		case "digest":
			out.Digest = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5d95a6ebEncodeRegistryCleanerAgentInternalPkgGarbage(out *jwriter.Writer, in GarbageBlob) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"digest\":"
		out.RawString(prefix)
		out.String(string(in.Digest))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GarbageBlob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5d95a6ebEncodeRegistryCleanerAgentInternalPkgGarbage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GarbageBlob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5d95a6ebEncodeRegistryCleanerAgentInternalPkgGarbage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GarbageBlob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5d95a6ebDecodeRegistryCleanerAgentInternalPkgGarbage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GarbageBlob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5d95a6ebDecodeRegistryCleanerAgentInternalPkgGarbage(l, v)
}
func easyjson5d95a6ebDecodeRegistryCleanerAgentInternalPkgGarbage1(in *jlexer.Lexer, out *Garbage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blobs":
			if in.IsNull() {
				in.Skip()
				out.Blobs = nil
			} else {
				in.Delim('[')
				if out.Blobs == nil {
					if !in.IsDelim(']') {
						out.Blobs = make([]GarbageBlob, 0, 2)
					} else {
						out.Blobs = []GarbageBlob{}
					}
				} else {
					out.Blobs = (out.Blobs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 GarbageBlob
					(v1).UnmarshalEasyJSON(in)
					out.Blobs = append(out.Blobs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5d95a6ebEncodeRegistryCleanerAgentInternalPkgGarbage1(out *jwriter.Writer, in Garbage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"blobs\":"
		out.RawString(prefix[1:])
		if in.Blobs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Blobs {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Garbage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5d95a6ebEncodeRegistryCleanerAgentInternalPkgGarbage1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Garbage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5d95a6ebEncodeRegistryCleanerAgentInternalPkgGarbage1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Garbage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5d95a6ebDecodeRegistryCleanerAgentInternalPkgGarbage1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Garbage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5d95a6ebDecodeRegistryCleanerAgentInternalPkgGarbage1(l, v)
}
